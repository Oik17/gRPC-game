// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: query.sql

package db

import (
	"context"
	"database/sql"

	"github.com/lib/pq"
)

const createQuestion = `-- name: CreateQuestion :one
INSERT INTO questions (question, answer) 
VALUES ($1, $2) 
RETURNING id, question, answer
`

type CreateQuestionParams struct {
	Question string
	Answer   sql.NullString
}

func (q *Queries) CreateQuestion(ctx context.Context, arg CreateQuestionParams) (Question, error) {
	row := q.db.QueryRowContext(ctx, createQuestion, arg.Question, arg.Answer)
	var i Question
	err := row.Scan(&i.ID, &i.Question, &i.Answer)
	return i, err
}

const createQuiz = `-- name: CreateQuiz :one
INSERT INTO quiz (title, question_ids) 
VALUES ($1, $2) 
RETURNING id, title, question_ids
`

type CreateQuizParams struct {
	Title       string
	QuestionIds []int64
}

func (q *Queries) CreateQuiz(ctx context.Context, arg CreateQuizParams) (Quiz, error) {
	row := q.db.QueryRowContext(ctx, createQuiz, arg.Title, pq.Array(arg.QuestionIds))
	var i Quiz
	err := row.Scan(&i.ID, &i.Title, pq.Array(&i.QuestionIds))
	return i, err
}

const deleteQuestion = `-- name: DeleteQuestion :one
DELETE FROM questions 
WHERE id = $1 
RETURNING id, question, answer
`

func (q *Queries) DeleteQuestion(ctx context.Context, id int64) (Question, error) {
	row := q.db.QueryRowContext(ctx, deleteQuestion, id)
	var i Question
	err := row.Scan(&i.ID, &i.Question, &i.Answer)
	return i, err
}

const deleteQuiz = `-- name: DeleteQuiz :one
DELETE FROM quiz 
WHERE id = $1 
RETURNING id, title, question_ids
`

func (q *Queries) DeleteQuiz(ctx context.Context, id int64) (Quiz, error) {
	row := q.db.QueryRowContext(ctx, deleteQuiz, id)
	var i Quiz
	err := row.Scan(&i.ID, &i.Title, pq.Array(&i.QuestionIds))
	return i, err
}

const getAllQuestions = `-- name: GetAllQuestions :many
SELECT id, question, answer FROM questions 
ORDER BY id
`

func (q *Queries) GetAllQuestions(ctx context.Context) ([]Question, error) {
	rows, err := q.db.QueryContext(ctx, getAllQuestions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Question
	for rows.Next() {
		var i Question
		if err := rows.Scan(&i.ID, &i.Question, &i.Answer); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAllQuizzes = `-- name: GetAllQuizzes :many
SELECT id, title, question_ids FROM quiz 
ORDER BY id
`

func (q *Queries) GetAllQuizzes(ctx context.Context) ([]Quiz, error) {
	rows, err := q.db.QueryContext(ctx, getAllQuizzes)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Quiz
	for rows.Next() {
		var i Quiz
		if err := rows.Scan(&i.ID, &i.Title, pq.Array(&i.QuestionIds)); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAnswer = `-- name: GetAnswer :one
SELECT answer FROM questions 
WHERE question = $1
`

func (q *Queries) GetAnswer(ctx context.Context, question string) (sql.NullString, error) {
	row := q.db.QueryRowContext(ctx, getAnswer, question)
	var answer sql.NullString
	err := row.Scan(&answer)
	return answer, err
}

const getQuestionById = `-- name: GetQuestionById :one
SELECT id, question, answer FROM questions 
WHERE id = $1
`

func (q *Queries) GetQuestionById(ctx context.Context, id int64) (Question, error) {
	row := q.db.QueryRowContext(ctx, getQuestionById, id)
	var i Question
	err := row.Scan(&i.ID, &i.Question, &i.Answer)
	return i, err
}

const getQuizById = `-- name: GetQuizById :one
SELECT id, title, question_ids FROM quiz 
WHERE id = $1
`

func (q *Queries) GetQuizById(ctx context.Context, id int64) (Quiz, error) {
	row := q.db.QueryRowContext(ctx, getQuizById, id)
	var i Quiz
	err := row.Scan(&i.ID, &i.Title, pq.Array(&i.QuestionIds))
	return i, err
}

const getQuizWithQuestions = `-- name: GetQuizWithQuestions :many
SELECT q.id AS quiz_id, q.title, qs.id AS question_id, qs.question, qs.answer
FROM quiz q
JOIN questions qs ON qs.id = ANY(q.question_ids)
WHERE q.id = $1
`

type GetQuizWithQuestionsRow struct {
	QuizID     int64
	Title      string
	QuestionID int64
	Question   string
	Answer     sql.NullString
}

func (q *Queries) GetQuizWithQuestions(ctx context.Context, id int64) ([]GetQuizWithQuestionsRow, error) {
	rows, err := q.db.QueryContext(ctx, getQuizWithQuestions, id)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetQuizWithQuestionsRow
	for rows.Next() {
		var i GetQuizWithQuestionsRow
		if err := rows.Scan(
			&i.QuizID,
			&i.Title,
			&i.QuestionID,
			&i.Question,
			&i.Answer,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateQuestion = `-- name: UpdateQuestion :one
UPDATE questions 
SET question = $2, answer = $3 
WHERE id = $1 
RETURNING id, question, answer
`

type UpdateQuestionParams struct {
	ID       int64
	Question string
	Answer   sql.NullString
}

func (q *Queries) UpdateQuestion(ctx context.Context, arg UpdateQuestionParams) (Question, error) {
	row := q.db.QueryRowContext(ctx, updateQuestion, arg.ID, arg.Question, arg.Answer)
	var i Question
	err := row.Scan(&i.ID, &i.Question, &i.Answer)
	return i, err
}

const updateQuiz = `-- name: UpdateQuiz :one
UPDATE quiz 
SET title = $2, question_ids = $3 
WHERE id = $1 
RETURNING id, title, question_ids
`

type UpdateQuizParams struct {
	ID          int64
	Title       string
	QuestionIds []int64
}

func (q *Queries) UpdateQuiz(ctx context.Context, arg UpdateQuizParams) (Quiz, error) {
	row := q.db.QueryRowContext(ctx, updateQuiz, arg.ID, arg.Title, pq.Array(arg.QuestionIds))
	var i Quiz
	err := row.Scan(&i.ID, &i.Title, pq.Array(&i.QuestionIds))
	return i, err
}
